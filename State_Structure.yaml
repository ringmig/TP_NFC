# TP_NFC Application State Structure
# AI Reference for understanding threading and synchronization patterns

application_modes:
  reception_station:
    registration_mode:
      states:
        - idle: "Waiting for Guest ID input"
        - background_scanning: "Continuous tag detection for info display"  
        - writing_tag: "10s operation, blocks all transitions"
      transitions:
        - to_checkpoint_mode: "Switch to Check-in Mode button"
        - to_settings: "Settings button (blocked during write operation)"
        - to_other_stations: "Station buttons (blocked during write operation)"
      
    checkpoint_mode:
      states:
        - scanning: "Continuous background scanning for check-ins"
        - processing: "Processing detected tag check-in"
      transitions:
        - to_registration_mode: "Switch to Registration Mode button"
        - to_settings: "Settings button (allowed)"
        - to_other_stations: "Station buttons (allowed)"

  other_stations:
    checkpoint_only:
      states:
        - scanning: "Continuous background scanning for check-ins"
        - processing: "Processing detected tag check-in"
      transitions:
        - to_reception: "Reception button"
        - to_settings: "Settings button (allowed)"
        - between_stations: "Other station buttons (allowed)"

overlay_modes:
  settings_panel:
    states:
      - menu_idle: "Settings menu displayed"
      - tag_info_operation: "10s tag read for info display"
      - erase_operation: "10s tag read for erase confirmation"
      - developer_panel: "Advanced developer operations submenu"
      - log_viewer: "Application log display with auto-refresh"
    transitions:
      - to_rewrite_mode: "Rewrite Tag button"
      - return_to_previous: "Close settings - returns to exact previous state"
    close_behaviors:
      - settings_x_button: "Returns to previous station, resumes scanning if was checkpoint"
      - developer_panel_close: "Returns to settings menu, maintains settings state"
      - log_viewer_close: "Returns to settings menu, maintains settings state"
    restrictions:
      - blocks_station_changes: "During active operations only"
      
  rewrite_mode:
    states:
      - idle: "Waiting for Guest ID entry"
      - background_scanning: "Helpful tag detection with status messages"
      - checking_registration: "5s operation to verify tag status"
      - confirmation_dialog: "User confirmation for overwrite"
      - writing: "Actual tag write operation"
    transitions:
      - exit_to_reception: "X button returns to Reception registration"
    restrictions:
      - blocks_all_transitions: "Complete isolation during operations"
      - stops_all_background_scanning: "Prevents conflicts"

  tag_info_display:
    states:
      - displaying_info: "Guest information shown"
      - auto_close_countdown: "10s countdown to auto-close"
    transitions:
      - return_to_origin: "Returns to exact state that triggered tag info"
    close_behaviors:
      - tag_info_x_button: "ALWAYS returns to station view, never to settings"
      - auto_close_timeout: "Same behavior as X button - to station view"
    special_behavior:
      - allows_background_scanning: "Only in checkpoint modes"
      - stops_auto_close_countdown: "Manual close cancels countdown timer"

threading_patterns:
  scanning_control:
    flags:
      - is_scanning: "Master control for background scanning loops"
      - _scanning_thread_active: "Prevents concurrent NFC read threads"
    
  operation_coordination:  
    flags:
      - operation_in_progress: "Blocks new user-initiated operations"
      - _active_operations: "Counter for background tasks"
    operation_specific_flags:
      - _write_operation_active: "Registration tag writing"
      - _rewrite_operation_active: "Rewrite mode operations"  
      - _rewrite_check_operation_active: "Rewrite pre-check phase"
      - _tag_info_operation_active: "Tag info reading"
      - _erase_operation_active: "Tag erase operations"

  ui_thread_safety:
    patterns:
      - main_thread_scheduling: "self.after() for all UI updates from threads"
      - safe_widget_access: "_safe_configure_*() methods with existence checks"
      - widget_cleanup: "Proper destruction order and reference clearing"
  
state_restoration_logic:
  settings_panel:
    mechanism: "Remember previous station and mode for return"
    variables: "_came_from_settings flag tracking"
    close_actions:
      - stop_settings_timer: "Cancel auto-close countdown"
      - restore_previous_station: "Return to stored previous state"
      - resume_scanning: "If previous state was checkpoint mode"
    
  tag_info_display:
    mechanism: "Return to triggering state after display/timeout"
    special_case: "Resume checkpoint scanning if came from checkpoint mode"
    close_actions:
      - stop_auto_close_timer: "Cancel countdown if active"
      - clear_tag_info_state: "Reset display flags"
      - resume_scanning: "Always resume background scanning"
    
  rewrite_mode:
    mechanism: "Always returns to Reception registration mode"
    cleanup: "Cancel all rewrite-specific operations and flags"
    close_actions:
      - reset_rewrite_flags: "Clear all rewrite operation states"
      - cancel_active_operations: "Stop any ongoing NFC operations"
      - return_to_reception_registration: "Force return to Reception station"

  confirmation_dialogs:
    mechanism: "Maintain parent state throughout dialog lifecycle"
    close_actions:
      - reset_button_states: "Clear any stuck button focus/active states"
      - restore_parent_ui: "Return to exact pre-dialog state"
      - maintain_operation_context: "Keep parent operation flags if needed"

ui_element_reference:
  # Quick reference for all button and UI element names in app.py
  # Use this to avoid searching through 4000+ lines of code
  
  main_ui_buttons:
    settings_hamburger: "self.settings_btn"
    theme_toggle: "self.theme_btn" 
    manual_checkin: "self.manual_checkin_btn"
    
  station_buttons:
    collection: "self.station_buttons"  # Dict with station names as keys
    individual_access: "self.station_buttons['Reception']"  # Example
    
  reception_mode_buttons:
    write_tag: "self.write_btn"
    write_cancel: "self.write_cancel_btn"  # Red cancel button during write operation
    
  settings_panel_buttons:
    tag_info: "self.tag_info_btn"
    write_tag_settings: "self.write_tag_btn"
    rewrite_tag: "self.rewrite_tag_btn"
    erase_tag: "self.erase_tag_btn"
    refresh_data: "self.refresh_btn"
    view_logs: "self.logs_btn"
    advanced_operations: "self.advanced_btn"
    
  rewrite_mode_buttons:
    exit_rewrite: "self.exit_rewrite_btn"  # X button to exit rewrite mode
    
  dialog_close_buttons:
    tag_info_close: "close_btn"  # Local variable in show_tag_info()
    log_viewer_close: "close_btn"  # Local variable in show_logs()
    developer_panel_close: "close_btn"  # Local variable in show_developer_options()
    
  confirmation_dialog_buttons:
    confirm_delete_all: "confirm_btn"  # In clear_all_data confirmation
    cancel_delete_all: "cancel_btn"    # In clear_all_data confirmation
    
  ui_containers:
    main_frame: "self.main_frame"
    content_frame: "self.content_frame"
    guest_tree: "self.guest_tree"
    summary_tree: "self.summary_tree"
    
  status_elements:
    status_label: "self.status_label"
    tag_info_countdown: "self.tag_info_countdown_label"
    
  operation_state_flags:
    write_operation: "self._write_operation_active"
    rewrite_operation: "self._rewrite_operation_active"
    rewrite_check_operation: "self._rewrite_check_operation_active"
    tag_info_operation: "self._tag_info_operation_active"
    erase_operation: "self._erase_operation_active"
    tag_info_auto_close: "self._tag_info_auto_close_active"
    
  mode_state_flags:
    settings_visible: "self.settings_visible"
    rewrite_mode: "self.is_rewrite_mode"
    displaying_tag_info: "self.is_displaying_tag_info"
    registration_mode: "self.is_registration_mode"
    scanning: "self.is_scanning"
    operation_in_progress: "self.operation_in_progress"

keyboard_shortcuts_state_management:
  escape_key_behavior:
    principle: "ESC must mimic exact behavior of clicking Cancel/X button"
    implementations:
      - tag_info_dialog: "Call close_tag_info() - returns to station view"
      - settings_panel: "Call toggle_settings() - returns to previous station"
      - developer_panel: "Call close function - returns to settings"
      - log_viewer: "Call destroy() - returns to settings"
      - confirmation_dialogs: "Call cancel callback - reset button states"
      - rewrite_mode: "Call exit_rewrite_mode() - return to Reception"
    restrictions:
      - never_interrupt_operations: "ESC blocked during active NFC operations"
      - maintain_state_flags: "Must preserve all operation and scanning flags"
      
  existing_shortcuts:
    cmd_ctrl_r:
      action: "Refresh guest list data"
      current_implementation: "Already implemented"
    
    cmd_ctrl_f:
      action: "Focus guest list search"
      current_implementation: "Already implemented"

nfc_timing_constraints:
  do_not_modify:
    - scanning_loop_delays: "3-5 second timeouts for responsiveness"
    - operation_timeouts: "10s for user operations, 5s for checks"
    - restart_delays: "100ms-2000ms for error recovery"
  
  rationale:
    - ui_responsiveness: "Short timeouts allow quick mode switches"
    - cancellation_support: "Easy to stop scanning when switching"
    - error_recovery: "Quick restart if NFC reader hangs"