name: Build Android APK (Docker)

on:
  push:
    branches:
      - master # Ensure this matches your default branch (e.g., main or master)
  pull_request:
    branches:
      - master
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Prepare buildozer.spec for Docker build
      working-directory: Android # Assuming your buildozer.spec is in 'Android'
      run: |
        echo "Preparing buildozer.spec for Docker environment..."
        
        # Ensure correct settings for buildozer.
        # The Docker image handles SDK/NDK installation, but buildozer.spec still needs target versions.
        # We'll stick to widely compatible versions for the pre-built image.
        sed -i 's/^android\.api = .*/android.api = 30/' buildozer.spec
        sed -i 's/^android\.ndk = .*/android.ndk = 25b/' buildozer.spec  
        sed -i 's/^android\.minapi = .*/android.minapi = 21/' buildozer.spec
        sed -i 's/^android\.sdk = .*/android.sdk = 30/' buildozer.spec
        # The build-tools version might be managed by the Docker image, but setting it explicitly
        # in spec can help if buildozer tries to verify it. Use 30.0.3, a common stable one.
        sed -i 's/^android\.build_tools = .*/android.build_tools = 30.0.3/' buildozer.spec
        sed -i 's/^android\.archs = .*/android.archs = armeabi-v7a/' buildozer.spec # Single arch for simplicity
        
        # Use stable Kivy version
        sed -i 's/^requirements = .*/requirements = python3,kivy==2.1.0/' buildozer.spec
        
        # Enable AndroidX for modern Android builds
        if ! grep -q "android.enable_androidx" buildozer.spec; then
          echo "android.enable_androidx = True" >> buildozer.spec
        else
          sed -i 's/^android\.enable_androidx = .*/android.enable_androidx = True/' buildozer.spec
        fi
        
        echo "Final buildozer.spec configuration:"
        grep -E "android\.(api|sdk|ndk|minapi|archs|build_tools|enable_androidx)|requirements" buildozer.spec
    
    - name: Build APK using Docker
      working-directory: Android
      timeout-minutes: 45
      run: |
        echo "Building APK using Docker with custom buildozer setup..."
        
        # Create a simple Dockerfile for buildozer
        cat > Dockerfile << 'EOF'
        FROM ubuntu:20.04
        
        # Prevent interactive prompts during package installation
        ENV DEBIAN_FRONTEND=noninteractive
        
        # Install system dependencies
        RUN apt-get update && apt-get install -y \
            python3 \
            python3-pip \
            openjdk-8-jdk \
            git \
            unzip \
            wget \
            curl \
            build-essential \
            zip \
            sudo \
            && rm -rf /var/lib/apt/lists/*
        
        # Create non-root user for buildozer
        RUN useradd -m -u 1000 builduser && \
            echo "builduser:builduser" | chpasswd && \
            adduser builduser sudo && \
            echo "builduser ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
        
        # Set Java environment
        ENV JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64
        ENV PATH=$JAVA_HOME/bin:$PATH
        
        # Install buildozer and dependencies as builduser
        USER builduser
        RUN pip3 install --user buildozer==1.5.0 cython==0.29.33
        ENV PATH=/home/builduser/.local/bin:$PATH
        
        # Set working directory
        WORKDIR /workspace
        
        # Default command
        CMD ["buildozer", "android", "debug", "--verbose"]
        EOF
        
        echo "Building custom buildozer Docker image..."
        docker build -t custom-buildozer .
        
        echo "Running buildozer in Docker container..."
        
        # Make sure the workspace has proper permissions
        sudo chown -R 1000:1000 .
        
        docker run --rm \
          -v "$PWD":/workspace \
          -w /workspace \
          -u builduser \
          custom-buildozer \
          buildozer android debug --verbose 2>&1 | tee build.log || {
            echo "Buildozer Docker build failed! See build.log for details."
            echo "Last 500 lines of build.log:"
            tail -500 build.log
            exit 1
          }
          
        echo "Buildozer Docker build completed. Searching for APK..."
        
        # Search for APK files. Buildozer usually places them in bin/ or .buildozer/bin/
        # or .buildozer/android/platform/build-*/dists/your_app_name/
        APK_FILE=$(find . -name "*.apk" -type f | head -1)
        
        if [ -n "$APK_FILE" ]; then
          echo "✅ Found APK: $APK_FILE"
          mkdir -p bin # Ensure bin directory exists in the host machine
          cp "$APK_FILE" bin/testapp-debug.apk # Standardize the output name
          echo "✅ Copied APK to Android/bin/testapp-debug.apk for upload"
          ls -la bin/
          echo "APK size: $(du -h bin/testapp-debug.apk)"
        else
          echo "❌ No APK file found after Docker build. Check build.log for errors."
          # Display more context from build.log if APK is not found
          echo "Last 200 lines of build.log:"
          tail -200 build.log
          exit 1 # Fail the workflow if no APK is found
        fi
    
    - name: Upload APK
      uses: actions/upload-artifact@v4
      if: success() # Only upload if the previous steps succeeded
      with:
        name: android-apk-testapp-docker
        path: Android/bin/testapp-debug.apk # Point to the standardized location
        if-no-files-found: fail # Fail the workflow if the APK is still not found here
