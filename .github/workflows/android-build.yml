name: Build Android APK (Docker)

on:
  push:
    branches:
      - master
    paths:
      - 'Android/**'
      - '.github/workflows/android-build.yml'
  pull_request:
    branches:
      - master
    paths:
      - 'Android/**'
      - '.github/workflows/android-build.yml'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Prepare buildozer.spec for Docker build
      working-directory: Android # Assuming your buildozer.spec is in 'Android'
      run: |
        echo "Preparing buildozer.spec for Docker environment..."
        
        # Ensure correct settings for buildozer.
        # The Docker image handles SDK/NDK installation, but buildozer.spec still needs target versions.
        # We'll stick to widely compatible versions for the pre-built image.
        sed -i 's/^android\.api = .*/android.api = 30/' buildozer.spec
        sed -i 's/^android\.ndk = .*/android.ndk = 25b/' buildozer.spec  
        sed -i 's/^android\.minapi = .*/android.minapi = 21/' buildozer.spec
        sed -i 's/^android\.sdk = .*/android.sdk = 30/' buildozer.spec
        # The build-tools version might be managed by the Docker image, but setting it explicitly
        # in spec can help if buildozer tries to verify it. Use 30.0.3, a common stable one.
        sed -i 's/^android\.build_tools = .*/android.build_tools = 30.0.3/' buildozer.spec
        sed -i 's/^android\.archs = .*/android.archs = armeabi-v7a/' buildozer.spec # Single arch for simplicity
        
        # Use stable Kivy version
        sed -i 's/^requirements = .*/requirements = python3,kivy==2.1.0/' buildozer.spec
        
        # Enable AndroidX for modern Android builds
        if ! grep -q "android.enable_androidx" buildozer.spec; then
          echo "android.enable_androidx = True" >> buildozer.spec
        else
          sed -i 's/^android\.enable_androidx = .*/android.enable_androidx = True/' buildozer.spec
        fi
        
        echo "Final buildozer.spec configuration:"
        grep -E "android\.(api|sdk|ndk|minapi|archs|build_tools|enable_androidx)|requirements" buildozer.spec
    
    - name: Build APK using Docker
      working-directory: Android
      timeout-minutes: 45
      run: |
        echo "Building APK using Docker with custom buildozer setup..."
        
        # Create a comprehensive Dockerfile for buildozer with pre-installed Android SDK
        cat > Dockerfile << 'EOF'
        FROM ubuntu:20.04
        
        # Prevent interactive prompts during package installation
        ENV DEBIAN_FRONTEND=noninteractive
        
        # Install system dependencies
        RUN apt-get update && apt-get install -y \
            python3 \
            python3-pip \
            openjdk-17-jdk \
            git \
            unzip \
            wget \
            curl \
            build-essential \
            zip \
            sudo \
            autoconf \
            automake \
            libtool \
            pkg-config \
            zlib1g-dev \
            libncurses5-dev \
            libncursesw5-dev \
            libtinfo5 \
            cmake \
            libffi-dev \
            libssl-dev \
            && rm -rf /var/lib/apt/lists/*
        
        # Create non-root user for buildozer
        RUN useradd -m -u 1000 builduser && \
            echo "builduser:builduser" | chpasswd && \
            adduser builduser sudo && \
            echo "builduser ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
        
        # Set Java environment
        ENV JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
        ENV PATH=$JAVA_HOME/bin:$PATH
        
        # Switch to builduser for remaining operations
        USER builduser
        WORKDIR /home/builduser
        
        # Install buildozer and dependencies
        RUN pip3 install --user buildozer==1.5.0 cython==0.29.33
        ENV PATH=/home/builduser/.local/bin:$PATH
        
        # Pre-install Android SDK to avoid license issues
        ENV ANDROID_HOME=/home/builduser/.buildozer/android/platform/android-sdk
        ENV ANDROID_SDK_ROOT=$ANDROID_HOME
        ENV PATH=$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools:$ANDROID_HOME/build-tools/30.0.3:$PATH
        
        # Create Android SDK directory structure
        RUN mkdir -p $ANDROID_HOME/cmdline-tools
        
        # Download and install Android command-line tools
        RUN cd /tmp && \
            wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip && \
            unzip -q commandlinetools-linux-9477386_latest.zip && \
            mv cmdline-tools $ANDROID_HOME/cmdline-tools/latest && \
            rm commandlinetools-linux-9477386_latest.zip
        
        # Accept licenses and install required SDK components
        RUN yes | sdkmanager --licenses && \
            sdkmanager \
                "platforms;android-30" \
                "platforms;android-21" \
                "build-tools;30.0.3" \
                "platform-tools" \
                "cmake;3.10.2.4988404"
        
        # Create compatibility symlink for buildozer's expected SDK structure
        RUN mkdir -p $ANDROID_HOME/tools/bin && \
            ln -sf $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager $ANDROID_HOME/tools/bin/sdkmanager && \
            ln -sf $ANDROID_HOME/cmdline-tools/latest/bin/avdmanager $ANDROID_HOME/tools/bin/avdmanager
        
        # Verify aidl is accessible and SDK structure
        RUN which aidl || find $ANDROID_HOME -name "aidl" -type f | head -1 && \
            ls -la $ANDROID_HOME/tools/bin/ && \
            $ANDROID_HOME/tools/bin/sdkmanager --version
        
        # Set working directory for builds
        WORKDIR /workspace
        
        # Default command
        CMD ["buildozer", "android", "debug", "--verbose"]
        EOF
        
        echo "Building custom buildozer Docker image..."
        docker build -t custom-buildozer .
        
        echo "Running buildozer in Docker container..."
        
        # Make sure the workspace has proper permissions
        sudo chown -R 1000:1000 .
        
        # Run buildozer with proper environment
        docker run --rm \
          -v "$PWD":/workspace \
          -w /workspace \
          -u builduser \
          -e ANDROID_HOME=/home/builduser/.buildozer/android/platform/android-sdk \
          -e ANDROID_SDK_ROOT=/home/builduser/.buildozer/android/platform/android-sdk \
          -e PATH="/home/builduser/.buildozer/android/platform/android-sdk/cmdline-tools/latest/bin:/home/builduser/.buildozer/android/platform/android-sdk/platform-tools:/home/builduser/.buildozer/android/platform/android-sdk/build-tools/30.0.3:/home/builduser/.local/bin:/usr/lib/jvm/java-17-openjdk-amd64/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin" \
          custom-buildozer \
          bash -c "
            echo 'Verifying Android SDK setup...'
            ls -la \$ANDROID_HOME/build-tools/ || echo 'No build-tools directory'
            find \$ANDROID_HOME -name 'aidl' -type f | head -5 || echo 'aidl not found'
            which aidl || echo 'aidl not in PATH'
            
            echo 'Running buildozer...'
            buildozer android debug --verbose
            
            echo 'Build completed. Checking for APK in bin directory...'
            ls -la bin/ || echo 'No bin directory found'
            find . -name '*.apk' -type f
          "
          
        # Check if Docker command succeeded (removed tee to preserve exit code)
        DOCKER_EXIT_CODE=$?
        if [ $DOCKER_EXIT_CODE -ne 0 ]; then
          echo "❌ Docker build failed with exit code $DOCKER_EXIT_CODE"
          exit 1
        fi
        
        echo "✅ Buildozer Docker build completed successfully!"
        
        # The APK was created inside the container at /workspace/bin/
        # Since we mounted $PWD as /workspace, it should be in ./bin/
        echo "Checking for APK files created by Docker build:"
        echo "Current directory contents:"
        ls -la
        echo "Checking bin directory (created by buildozer inside container):"
        ls -la bin/ 2>/dev/null || echo "No bin directory found on host"
        echo "Searching for all APK files in workspace:"
        find . -name "*.apk" -type f 2>/dev/null || echo "No APK files found"
        
        # The APK should be in bin/ directory, but let's check everywhere just in case
        APK_FILE=$(find bin -name "*.apk" -type f 2>/dev/null | head -1)
        
        # If not in bin/, search the entire workspace
        if [ -z "$APK_FILE" ]; then
          echo "APK not found in bin/, searching entire workspace..."
          APK_FILE=$(find . -name "*.apk" -type f 2>/dev/null | head -1)
        fi
        
        if [ -n "$APK_FILE" ]; then
          echo "✅ Found APK: $APK_FILE"
          # The APK is already in a good location (bin/), just use it directly
          echo "APK location: $APK_FILE"
          echo "APK size: $(du -h $APK_FILE)"
          echo "APK details:"
          ls -la "$APK_FILE"
        else
          echo "❌ No APK file found after Docker build."
          echo "This is unexpected since the build reported success."
          echo "Docker build output showed APK created, but it's not accessible on host."
          echo "This might be a volume mounting issue."
          exit 1
        fi
    
    - name: Upload APK
      uses: actions/upload-artifact@v4
      if: success() # Only upload if the previous steps succeeded
      with:
        name: android-apk-testapp-docker
        path: Android/bin/testapp-0.1-arm64-v8a_armeabi-v7a-debug.apk # APK created by buildozer
        if-no-files-found: error # Fail the workflow if the APK is still not found here
