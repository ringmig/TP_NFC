name: Build Android APK
on: [push, pull_request, workflow_dispatch]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.8
      uses: actions/setup-python@v5
      with:
        python-version: '3.8'
    
    - name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        java-version: '11'
        distribution: 'temurin'
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential git python3-pip unzip zlib1g-dev libncurses-dev libffi-dev libssl-dev autoconf libtool libtool-bin pkg-config ccache cmake
        sudo apt-get install -y automake m4 libltdl-dev gettext
        
        # Ensure libtool macros are available
        echo "Setting up libtool environment..."
        sudo ldconfig
        
        # Verify autotools installation
        echo "Autotools versions:"
        autoconf --version | head -1
        automake --version | head -1
        libtool --version | head -1
        
        # Export paths for libtool macros
        export ACLOCAL_PATH="/usr/share/aclocal"
        echo "ACLOCAL_PATH=$ACLOCAL_PATH"
        
    - name: Install Python packages
      run: |
        pip install --upgrade pip
        pip install buildozer==1.4.0 cython==0.29.33
        
    - name: Pre-setup Android SDK for license acceptance
      working-directory: Android
      run: |
        export ANDROID_HOME=$HOME/.buildozer/android/platform/android-sdk
        
        # Pre-create the expected SDK structure
        echo "Pre-creating SDK directory structure..."
        mkdir -p "$ANDROID_HOME"
        
        # Download command-line tools directly if buildozer hasn't done it
        if [ ! -d "$ANDROID_HOME/cmdline-tools" ]; then
          echo "Downloading Android command-line tools..."
          cd "$ANDROID_HOME"
          wget -q https://dl.google.com/android/repository/commandlinetools-linux-6514223_latest.zip
          unzip -q commandlinetools-linux-6514223_latest.zip
          mkdir -p cmdline-tools/latest
          mv cmdline-tools/* cmdline-tools/latest/ 2>/dev/null || true
          cd -
        fi
        
        # Let buildozer download SDK first (it will fail on licenses)
        echo "Running buildozer to continue SDK setup..."
        set +e # Don't exit on error
        timeout 600 buildozer android debug 2>&1 | tee buildozer_output.log || echo "Buildozer SDK setup phase completed"
        set -e # Re-enable exit on error
        
        # Find where sdkmanager actually is
        echo "Looking for sdkmanager..."
        find $HOME/.buildozer -name "sdkmanager" -type f 2>/dev/null || echo "No sdkmanager found yet"
        
        # Check both possible locations
        if [ -f "$ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager" ]; then
          SDKMANAGER="$ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager"
          echo "Found sdkmanager at: $SDKMANAGER"
        elif [ -f "$ANDROID_HOME/tools/bin/sdkmanager" ]; then
          SDKMANAGER="$ANDROID_HOME/tools/bin/sdkmanager"
          echo "Found sdkmanager at: $SDKMANAGER"
        else
          echo "ERROR: sdkmanager not found after buildozer run"
          echo "Checking buildozer output for clues..."
          grep -i "sdkmanager\|sdk\|download" buildozer_output.log | tail -20
          exit 1
        fi
        
        # Ensure sdkmanager is in PATH for the license acceptance step
        export PATH="$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/tools/bin:$PATH"
        
        # Accept all Android SDK licenses
        echo "Accepting Android SDK licenses..."
        yes | $SDKMANAGER --sdk_root="$ANDROID_HOME" --licenses || echo "License acceptance completed"
        
        # Install SDK components matching our buildozer.spec
        REQUIRED_API_LEVEL="30"
        REQUIRED_BUILD_TOOLS_VERSION="30.0.3"
        
        echo "Installing Android SDK components: API $REQUIRED_API_LEVEL, Build-tools $REQUIRED_BUILD_TOOLS_VERSION..."
        $SDKMANAGER --sdk_root="$ANDROID_HOME" \
          "platforms;android-$REQUIRED_API_LEVEL" \
          "platforms;android-21" \
          "build-tools;$REQUIRED_BUILD_TOOLS_VERSION" \
          "platform-tools" \
          "cmake;3.10.2.4988404" || echo "SDK component installation completed"
        
        # Verify installation
        echo "Verifying SDK component installation..."
        ls -la "$ANDROID_HOME/platforms/" || echo "No platforms directory"
        ls -la "$ANDROID_HOME/build-tools/" || echo "No build-tools directory"
        find "$ANDROID_HOME" -name "aidl" -type f | head -5 || echo "aidl not found"
        
    - name: Set Android Environment Variables for Build
      working-directory: Android
      run: |
        export ANDROID_HOME=$HOME/.buildozer/android/platform/android-sdk
        export ANDROID_SDK_ROOT=$ANDROID_HOME
        
        # Find the actual NDK path (buildozer downloads specific version)
        NDK_PATH=$(find $HOME/.buildozer/android/platform -name "android-ndk-r*" -type d | head -1)
        if [ -n "$NDK_PATH" ]; then
          export ANDROID_NDK_HOME="$NDK_PATH"
          echo "Found NDK at: $NDK_PATH"
        else
          echo "NDK not found, using default path"
          export ANDROID_NDK_HOME="$ANDROID_HOME/ndk/25.1.8937393"
        fi
        
        # Add these exports to the global environment for subsequent steps
        echo "ANDROID_HOME=$ANDROID_HOME" >> $GITHUB_ENV
        echo "ANDROID_SDK_ROOT=$ANDROID_HOME" >> $GITHUB_ENV
        echo "ANDROID_NDK_HOME=$ANDROID_NDK_HOME" >> $GITHUB_ENV
        
        # Update PATH to include SDK tools
        echo "PATH=$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools:$ANDROID_HOME/build-tools/30.0.3:$PATH" >> $GITHUB_ENV
        
        echo "Environment variables set:"
        echo "ANDROID_HOME=$ANDROID_HOME"
        echo "ANDROID_SDK_ROOT=$ANDROID_HOME"
        echo "ANDROID_NDK_HOME=$ANDROID_NDK_HOME"
        
    - name: Build APK with licenses pre-accepted
      working-directory: Android
      run: |
        echo "Building APK with pre-accepted licenses..."
        
        # Export environment for libtool
        export ACLOCAL_PATH="/usr/share/aclocal"
        export ACLOCAL="aclocal -I /usr/share/aclocal"
        
        # Ensure buildozer.spec has correct values (force update)
        echo "Updating buildozer.spec to ensure correct values..."
        sed -i 's/^android\.api = .*/android.api = 30/' buildozer.spec
        sed -i 's/^android\.ndk = .*/android.ndk = 25b/' buildozer.spec  
        sed -i 's/^android\.minapi = .*/android.minapi = 23/' buildozer.spec
        sed -i 's/^android\.sdk = .*/android.sdk = 30/' buildozer.spec
        sed -i 's/^android\.build_tools = .*/android.build_tools = 30.0.3/' buildozer.spec
        
        # Show final buildozer configuration
        echo "Final buildozer configuration:"
        grep -E "android\.(api|sdk|ndk|minapi|archs|build_tools|enable_androidx)" buildozer.spec
        
        # Show environment variables
        echo "Environment variables:"
        echo "ANDROID_HOME=$ANDROID_HOME"
        echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" 
        echo "ANDROID_NDK_HOME=$ANDROID_NDK_HOME"
        echo "JAVA_HOME=$JAVA_HOME"
        java -version
        
        # Clean buildozer cache to ensure new settings are used
        rm -rf .buildozer/android/platform/build-*
        rm -rf .buildozer/android/platform/dists
        
        # Clean and build with maximum verbosity
        buildozer android clean
        
        # Try building with maximum detailed error output
        echo "Starting APK build with maximum verbosity..."
        buildozer android debug --verbose 2>&1 | tee build.log || {
          echo "Build failed, checking for Gradle errors..."
          echo "Last 100 lines of build log:"
          tail -100 build.log
          
          # Check if gradlew exists and try to get more info
          GRADLE_PATH=$(find .buildozer -name "gradlew" -type f 2>/dev/null | head -1)
          if [ -n "$GRADLE_PATH" ]; then
            echo "Found gradlew at: $GRADLE_PATH"
            echo "Gradle version:"
            "$GRADLE_PATH" --version || echo "Failed to get Gradle version"
          fi
          
          # Check if APK was still created despite the error
          echo "Checking for any APK files created..."
          find .buildozer -name "*.apk" -type f 2>/dev/null || echo "No APK files found"
          find . -name "*.apk" -type f 2>/dev/null || echo "No APK files in current directory"
          
          exit 1
        }
        
        # If build succeeded, show what was created
        echo "Build completed successfully!"
        echo "Comprehensive APK search..."
        
        # Search everywhere for APK files
        echo "=== Searching in current directory and subdirectories ==="
        find . -name "*.apk" -type f -exec ls -la {} \; 2>/dev/null || echo "No APK files found in current directory tree"
        
        echo "=== Searching in buildozer cache ==="
        find $HOME/.buildozer -name "*.apk" -type f -exec ls -la {} \; 2>/dev/null || echo "No APK files found in buildozer cache"
        
        echo "=== Looking for dist directories ==="
        find . -type d -name "dist" -exec ls -la {} \; 2>/dev/null || echo "No dist directories found"
        
        echo "=== Looking for dists directories ==="  
        find . -type d -name "dists" -exec ls -la {} \; 2>/dev/null || echo "No dists directories found"
        
        echo "=== Directory structure of buildozer output ==="
        ls -la .buildozer/android/platform/build-*/dists/ 2>/dev/null || echo "No dists directory structure found"
        
        # Create bin directory and copy any APK found anywhere
        mkdir -p bin/
        
        # Try multiple search methods to find APK
        APK_FILE=""
        
        # Method 1: Search in current directory tree
        APK_FILE=$(find . -name "*.apk" -type f | head -1)
        
        # Method 2: Search in buildozer cache if not found
        if [ -z "$APK_FILE" ]; then
          APK_FILE=$(find $HOME/.buildozer -name "*.apk" -type f | head -1)
        fi
        
        # Method 3: Look specifically in common buildozer locations
        if [ -z "$APK_FILE" ]; then
          for pattern in ".buildozer/android/platform/build-*/dists/testapp/dist" ".buildozer/android/platform/build-*/dists/testapp" ".buildozer/android/app"; do
            APK_FILE=$(find $pattern -name "*.apk" -type f 2>/dev/null | head -1)
            if [ -n "$APK_FILE" ]; then
              break
            fi
          done
        fi
        
        if [ -n "$APK_FILE" ]; then
          echo "✅ Found APK: $APK_FILE"
          cp "$APK_FILE" bin/testapp-debug.apk
          echo "✅ Copied APK to bin/testapp-debug.apk for upload"
          ls -la bin/
        else
          echo "❌ No APK file found anywhere!"
          echo "This might indicate the build actually failed despite the success message"
        fi
        
    - name: Upload APK
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: android-apk-testapp
        path: Android/bin/testapp-debug.apk
        if-no-files-found: warn