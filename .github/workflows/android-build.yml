name: Build Android APK
on: [push, pull_request]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.8
      uses: actions/setup-python@v5
      with:
        python-version: '3.8'
    
    - name: Set up JDK 8
      uses: actions/setup-java@v4
      with:
        java-version: '8'
        distribution: 'temurin'
        
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential git python3-pip unzip zlib1g-dev libncurses-dev libffi-dev libssl-dev autoconf libtool pkg-config ccache cmake
        
    - name: Install Python packages
      run: |
        pip install --upgrade pip
        pip install buildozer==1.4.0 cython==0.29.33
        
    - name: Pre-setup Android SDK for license acceptance
      working-directory: Android
      run: |
        export ANDROID_HOME=$HOME/.buildozer/android/platform/android-sdk
        mkdir -p "$ANDROID_HOME/cmdline-tools/latest/bin"
        
        # Check if sdkmanager already exists from previous runs/caching
        if [ ! -f "$ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager" ]; then
          echo "sdkmanager not found, running buildozer to trigger initial SDK download."
          # This buildozer command will initiate SDK download. It will likely fail
          # at the license prompt, but it populates the SDK directories.
          set +e # Temporarily disable exit on error
          buildozer android debug || echo "Buildozer initial SDK download attempted."
          set -e # Re-enable exit on error
        else
          echo "sdkmanager already exists."
        fi
        
        # Ensure sdkmanager is in PATH for the license acceptance step
        export PATH="$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/tools/bin:$PATH"
        
        # Accept all Android SDK licenses
        echo "Accepting Android SDK licenses..."
        if [ -f "$ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager" ]; then
          yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --sdk_root="$ANDROID_HOME" --licenses
        elif [ -f "$ANDROID_HOME/tools/bin/sdkmanager" ]; then
          yes | $ANDROID_HOME/tools/bin/sdkmanager --sdk_root="$ANDROID_HOME" --licenses
        fi
        
        # Install SDK components matching our buildozer.spec
        REQUIRED_API_LEVEL="29"
        REQUIRED_BUILD_TOOLS_VERSION="29.0.3"
        
        echo "Installing Android SDK components: API $REQUIRED_API_LEVEL, Build-tools $REQUIRED_BUILD_TOOLS_VERSION..."
        
        if [ -f "$ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager" ]; then
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --sdk_root="$ANDROID_HOME" \
            "platforms;android-$REQUIRED_API_LEVEL" \
            "platforms;android-21" \
            "build-tools;$REQUIRED_BUILD_TOOLS_VERSION" \
            "platform-tools" \
            "cmake;3.10.2.4988404"
        elif [ -f "$ANDROID_HOME/tools/bin/sdkmanager" ]; then
          $ANDROID_HOME/tools/bin/sdkmanager --sdk_root="$ANDROID_HOME" \
            "platforms;android-$REQUIRED_API_LEVEL" \
            "platforms;android-21" \
            "build-tools;$REQUIRED_BUILD_TOOLS_VERSION" \
            "platform-tools" \
            "cmake;3.10.2.4988404"
        fi
        
        # Verify installation
        echo "Verifying SDK component installation..."
        ls -la "$ANDROID_HOME/platforms/" || echo "No platforms directory"
        ls -la "$ANDROID_HOME/build-tools/" || echo "No build-tools directory"
        find "$ANDROID_HOME" -name "aidl" -type f | head -5 || echo "aidl not found"
        
    - name: Build APK with licenses pre-accepted
      working-directory: Android
      run: |
        echo "Building APK with pre-accepted licenses..."
        
        # Show buildozer configuration
        echo "Buildozer configuration:"
        grep -E "android\.(api|sdk|ndk|minapi|archs|build_tools)" buildozer.spec
        
        # Clean and build
        buildozer android clean
        buildozer android debug
        
    - name: Upload APK
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: android-apk
        path: Android/bin/*.apk