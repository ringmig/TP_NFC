name: Build Android APK (Docker)
on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Check Docker availability
      run: |
        echo "Checking Docker setup on GitHub Actions runner..."
        docker --version
        docker info || echo "Docker info failed, but continuing..."
        echo "Available Docker images:"
        docker images | head -10
    
    - name: Prepare buildozer.spec for Docker build
      working-directory: Android
      run: |
        echo "Preparing buildozer.spec for Docker environment..."
        
        # Ensure correct settings for Docker buildozer (use build-tools that buildozer expects)
        sed -i 's/^android\.api = .*/android.api = 30/' buildozer.spec
        sed -i 's/^android\.ndk = .*/android.ndk = 25b/' buildozer.spec  
        sed -i 's/^android\.minapi = .*/android.minapi = 21/' buildozer.spec
        sed -i 's/^android\.sdk = .*/android.sdk = 30/' buildozer.spec
        sed -i 's/^android\.build_tools = .*/android.build_tools = 36.0.0/' buildozer.spec
        sed -i 's/^android\.archs = .*/android.archs = armeabi-v7a/' buildozer.spec
        
        # Use stable Kivy version
        sed -i 's/^requirements = .*/requirements = python3,kivy==2.1.0/' buildozer.spec
        
        # Enable AndroidX for modern Android builds
        if ! grep -q "android.enable_androidx" buildozer.spec; then
          echo "android.enable_androidx = True" >> buildozer.spec
        else
          sed -i 's/^android\.enable_androidx = .*/android.enable_androidx = True/' buildozer.spec
        fi
        
        echo "Final buildozer.spec configuration:"
        grep -E "android\.(api|sdk|ndk|minapi|archs|build_tools|enable_androidx)|requirements" buildozer.spec
    
    - name: Build APK using Docker
      working-directory: Android
      run: |
        echo "Building APK using buildozer Docker image..."
        echo "Current directory contents:"
        ls -la
        
        # Create output directory
        mkdir -p bin
        
        # Try Docker-based build with custom Ubuntu container
        BUILD_SUCCESS=false
        
        echo "Attempting Docker-based build with custom Ubuntu container..."
        
        if docker run --rm \
          -v "$PWD":/workspace \
          --workdir /workspace \
          ubuntu:20.04 bash -c "
            set -e
            echo 'Installing system dependencies...'
            apt-get update -qq
            apt-get install -y python3 python3-pip openjdk-8-jdk-headless git unzip wget curl build-essential
            
            echo 'Installing Python packages...'
            pip3 install buildozer==1.5.0 cython==0.29.33
            
            echo 'Setting Java environment...'
            export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64
            export PATH=\$JAVA_HOME/bin:\$PATH
            java -version
            
            echo 'Setting up Android SDK manually to avoid license issues...'
            
            # Create Android SDK directory structure
            export ANDROID_HOME=/root/.buildozer/android/platform/android-sdk
            export ANDROID_SDK_ROOT=\$ANDROID_HOME
            mkdir -p \$ANDROID_HOME/cmdline-tools
            
            # Download and setup Android command-line tools
            echo 'Downloading Android command-line tools...'
            cd /tmp
            wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
            unzip -q commandlinetools-linux-9477386_latest.zip
            mv cmdline-tools \$ANDROID_HOME/cmdline-tools/latest
            cd /workspace
            
            # Set PATH for SDK tools (include both build-tools versions)
            export PATH=\$ANDROID_HOME/cmdline-tools/latest/bin:\$ANDROID_HOME/platform-tools:\$ANDROID_HOME/build-tools/36.0.0:\$ANDROID_HOME/build-tools/30.0.3:\$PATH
            
            # Accept all licenses FIRST
            echo 'Accepting Android SDK licenses upfront...'
            yes | sdkmanager --licenses || echo 'License acceptance completed'
            
            # Install required SDK components with exact versions that buildozer expects
            echo 'Installing required Android SDK components...'
            
            # First check what build-tools versions are available
            echo 'Available build-tools versions:'
            sdkmanager --list | grep build-tools | head -10 || echo 'Could not list build-tools'
            
            # Install both the version we want AND the version buildozer might expect
            sdkmanager \
              'platforms;android-30' \
              'platforms;android-21' \
              'build-tools;30.0.3' \
              'build-tools;36.0.0' \
              'platform-tools' \
              'cmake;3.10.2.4988404' || echo 'SDK components installation completed'
            
            # Verify installation
            echo 'Verifying SDK installation...'
            ls -la \$ANDROID_HOME/platforms/ || echo 'No platforms directory'
            ls -la \$ANDROID_HOME/build-tools/ || echo 'No build-tools directory'
            ls -la \$ANDROID_HOME/build-tools/36.0.0/ || echo 'No build-tools 36.0.0 directory'
            ls -la \$ANDROID_HOME/build-tools/30.0.3/ || echo 'No build-tools 30.0.3 directory'
            find \$ANDROID_HOME -name 'aidl' -type f | head -5 || echo 'aidl not found'
            
            # Specifically check that aidl is accessible in PATH
            which aidl || echo 'aidl not in PATH'
            \$ANDROID_HOME/build-tools/36.0.0/aidl --help || echo 'aidl 36.0.0 not working'
            
            # Force buildozer to use our pre-installed SDK
            echo 'Configuring buildozer to use pre-installed SDK...'
            export ANDROIDAPI=30
            export ANDROIDMINAPI=21
            export ANDROIDSDK=\$ANDROID_HOME
            export ANDROIDNDK=\$ANDROID_HOME/ndk-bundle
            
            # Clean any partial buildozer cache
            rm -rf .buildozer/android/platform/build-* || true
            rm -rf .buildozer/android/platform/dists || true
            
            echo 'Running buildozer with pre-configured SDK...'
            buildozer android debug --verbose
          " 2>&1; then
          
          echo "✅ Build succeeded with custom Ubuntu container"
          BUILD_SUCCESS=true
        else
          echo "❌ Custom Ubuntu container build failed"
        fi
        
        if [ "$BUILD_SUCCESS" != "true" ]; then
          echo "❌ All Docker images failed. Falling back to manual buildozer installation..."
          
          # Install buildozer manually as fallback
          sudo apt-get update
          sudo apt-get install -y python3-pip openjdk-11-jdk unzip
          pip3 install buildozer==1.5.0 cython==0.29.33
          
          # Set JAVA_HOME
          export JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64
          
          # Try building with installed buildozer
          buildozer android debug || {
            echo "❌ Fallback buildozer also failed"
            exit 1
          }
        fi
          
        echo "Docker build completed. Searching for APK..."
        
        # Search for APK files in multiple locations
        APK_FILE=""
        
        # Method 1: Look in current directory
        APK_FILE=$(find . -name "*.apk" -type f | head -1)
        
        # Method 2: Look in .buildozer directory
        if [ -z "$APK_FILE" ]; then
          APK_FILE=$(find .buildozer -name "*.apk" -type f 2>/dev/null | head -1)
        fi
        
        # Method 3: Look in bin directory (buildozer default output)
        if [ -z "$APK_FILE" ]; then
          APK_FILE=$(find bin -name "*.apk" -type f 2>/dev/null | head -1)
        fi
        
        if [ -n "$APK_FILE" ]; then
          echo "✅ Found APK: $APK_FILE"
          # Copy to standardized location if not already there
          if [ "$APK_FILE" != "bin/testapp-debug.apk" ]; then
            cp "$APK_FILE" bin/testapp-debug.apk
            echo "✅ Copied APK to bin/testapp-debug.apk"
          fi
          ls -la bin/
          echo "APK size: $(du -h bin/testapp-debug.apk)"
        else
          echo "❌ No APK file found after Docker build"
          echo "Docker build may have failed. Checking directory structure..."
          echo "Current directory:"
          find . -type f -name "*.apk" -o -name "*.log" | head -20
          echo "Buildozer directory:"
          find .buildozer -type f -name "*.apk" -o -name "*.log" 2>/dev/null | head -20 || echo "No .buildozer directory"
          exit 1
        fi
    
    - name: Upload APK
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: android-apk-testapp-docker
        path: Android/bin/testapp-debug.apk
        if-no-files-found: fail