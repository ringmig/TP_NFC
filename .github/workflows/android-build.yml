name: Build Android APK

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch: # Allows manual triggering

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.8
      uses: actions/setup-python@v5
      with:
        python-version: '3.8'

    - name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        java-version: '11'
        distribution: 'temurin'

    - name: Install system dependencies
      run: |
        echo "Installing system dependencies..."
        sudo apt-get update
        sudo apt-get install -y build-essential git python3-pip unzip zlib1g-dev libncurses-dev libffi-dev libssl-dev autoconf libtool libtool-bin pkg-config ccache cmake automake m4 libltdl-dev gettext
        sudo ldconfig
        autoconf --version | head -1
        automake --version | head -1
        libtool --version | head -1
        echo "ACLOCAL_PATH=/usr/share/aclocal" >> $GITHUB_ENV # Export globally

    - name: Install Python packages
      run: |
        echo "Installing Python packages..."
        pip install --upgrade pip
        pip install buildozer==1.5.0 cython==0.29.33 colorama

    - name: Setup Android SDK, NDK and Accept Licenses
      # This step will fully set up the Android SDK and NDK independently
      # of buildozer's internal mechanisms, ensuring all licenses are accepted.
      run: |
        echo "Setting up Android SDK and NDK..."

        # Define ANDROID_HOME and propagate globally
        export ANDROID_HOME="$HOME/.buildozer/android/platform/android-sdk"
        echo "ANDROID_HOME=$ANDROID_HOME" >> $GITHUB_ENV
        echo "ANDROID_SDK_ROOT=$ANDROID_HOME" >> $GITHUB_ENV # Also set SDK_ROOT for compatibility

        # Create SDK directory structure
        echo "Creating SDK directory structure: $ANDROID_HOME"
        mkdir -p "$ANDROID_HOME/cmdline-tools"

        # Download and unzip latest command-line tools
        # Using a more recent version that should have consistent structure
        CMD_TOOLS_URL="https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip"
        echo "Downloading Android command-line tools from $CMD_TOOLS_URL"
        wget -q "$CMD_TOOLS_URL" -O /tmp/commandlinetools.zip
        
        # First, let's see what's actually in the zip file
        echo "Contents of commandlinetools.zip:"
        unzip -l /tmp/commandlinetools.zip | head -20
        
        # Extract to temporary location
        unzip -q /tmp/commandlinetools.zip -d /tmp/cmdtools_extract/
        
        # Check what was actually extracted
        echo "Checking extracted contents in /tmp/cmdtools_extract/:"
        ls -la /tmp/cmdtools_extract/
        
        # Find the actual cmdline-tools directory
        CMDTOOLS_DIR=$(find /tmp/cmdtools_extract -name "cmdline-tools" -type d | head -1)
        if [ -z "$CMDTOOLS_DIR" ]; then
          # If no cmdline-tools directory, look for any directory with bin/sdkmanager
          CMDTOOLS_DIR=$(find /tmp/cmdtools_extract -name "sdkmanager" -type f | head -1 | xargs dirname | xargs dirname)
        fi
        
        if [ -n "$CMDTOOLS_DIR" ] && [ -d "$CMDTOOLS_DIR" ]; then
          echo "Found command-line tools at: $CMDTOOLS_DIR"
          mv "$CMDTOOLS_DIR" "$ANDROID_HOME/cmdline-tools/latest"
        else
          echo "ERROR: Could not locate command-line tools in extracted files"
          echo "Directory structure:"
          find /tmp/cmdtools_extract -type f -name "*" | head -20
          exit 1
        fi
        
        rm /tmp/commandlinetools.zip
        rm -rf /tmp/cmdtools_extract
        echo "Android command-line tools installed to $ANDROID_HOME/cmdline-tools/latest"

        # Add SDK tools to PATH for sdkmanager and other tools
        export PATH="$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools:$PATH"
        echo "PATH=$PATH" >> $GITHUB_ENV # Update PATH globally

        # Accept all Android SDK licenses
        # This is crucial and must be done for all components
        echo "Accepting Android SDK licenses..."
        yes | sdkmanager --licenses || echo "License acceptance command completed (may show errors if no licenses to accept)."

        # Define required versions based on buildozer.spec and common practice
        REQUIRED_API_LEVEL="30"
        REQUIRED_BUILD_TOOLS_VERSION="30.0.3"
        REQUIRED_NDK_VERSION="25b" # Match buildozer.spec and common NDK versions

        echo "Installing specific Android SDK components:"
        echo "  - platforms;android-$REQUIRED_API_LEVEL"
        echo "  - platforms;android-21 (min API)"
        echo "  - build-tools;$REQUIRED_BUILD_TOOLS_VERSION"
        echo "  - platform-tools"
        echo "  - ndk;${REQUIRED_NDK_VERSION}"
        echo "  - cmake;3.10.2.4988404"

        sdkmanager \
          "platforms;android-$REQUIRED_API_LEVEL" \
          "platforms;android-21" \
          "build-tools;$REQUIRED_BUILD_TOOLS_VERSION" \
          "platform-tools" \
          "ndk;${REQUIRED_NDK_VERSION}" \
          "cmake;3.10.2.4988404" || {
            echo "ERROR: Failed to install all required SDK components."
            exit 1
          }
        echo "All required SDK components installed."

        # Find the actual NDK path after installation and set ANDROID_NDK_HOME globally
        NDK_PATH=$(find "$ANDROID_HOME/ndk" -maxdepth 1 -name "*-r${REQUIRED_NDK_VERSION}*" -type d | head -1)
        if [ -z "$NDK_PATH" ]; then
          # Fallback if find doesn't work as expected, though sdkmanager should install it
          NDK_PATH=$(find $HOME/.buildozer/android/platform -name "android-ndk-r*" -type d | head -1)
        fi

        if [ -n "$NDK_PATH" ]; then
          export ANDROID_NDK_HOME="$NDK_PATH"
          echo "Found NDK at: $NDK_PATH"
        else
          echo "WARNING: NDK path not found after installation. Build might fail."
          # Set a default path if NDK_PATH is still empty, though this is less reliable
          export ANDROID_NDK_HOME="$ANDROID_HOME/ndk/25.1.8937393" # A common default
        fi
        echo "ANDROID_NDK_HOME=$ANDROID_NDK_HOME" >> $GITHUB_ENV

        echo "Android SDK and NDK setup complete."

    - name: Build APK
      working-directory: Android # Ensure this is the correct directory containing buildozer.spec
      run: |
        echo "Starting APK build process..."

        # Export environment for libtool (already set globally, but good to re-confirm)
        export ACLOCAL_PATH="/usr/share/aclocal"
        export ACLOCAL="aclocal -I /usr/share/aclocal"

        # Update buildozer.spec to ensure it aligns with installed SDK/NDK versions
        echo "Updating buildozer.spec with consistent API/NDK versions..."
        sed -i 's/^android\.api = .*/android.api = 30/' buildozer.spec
        sed -i 's/^android\.ndk = .*/android.ndk = 25b/' buildozer.spec
        sed -i 's/^android\.minapi = .*/android.minapi = 21/' buildozer.spec # Changed to 21 for consistency with SDK install
        sed -i 's/^android\.sdk = .*/android.sdk = 30/' buildozer.spec
        sed -i 's/^android\.build_tools = .*/android.build_tools = 30.0.3/' buildozer.spec
        sed -i 's/^android\.archs = .*/android.archs = arm64-v8a,armeabi-v7a/' buildozer.spec # Ensure both archs are specified

        # Ensure androidx is enabled if needed for modern Android versions
        # This line is important for many modern Kivy/Android projects
        if ! grep -q "android.enable_androidx" buildozer.spec; then
          echo "android.enable_androidx = 1" >> buildozer.spec
        else
          sed -i 's/^android\.enable_androidx = .*/android.enable_androidx = 1/' buildozer.spec
        fi

        echo "Final buildozer configuration:"
        grep -E "android\.(api|sdk|ndk|minapi|archs|build_tools|enable_androidx)" buildozer.spec

        echo "Environment variables during build:"
        env | grep "ANDROID\|JAVA_HOME\|ACLOCAL"

        # Clean buildozer cache to ensure a fresh build with the pre-installed SDK/NDK
        echo "Cleaning buildozer cache..."
        buildozer android clean

        # Force single architecture if needed, but your spec now includes both.
        # If you only want one, uncomment and adjust:
        # export P4A_ARCHS="armeabi-v7a"
        # export ARCH="armeabi-v7a"

        # Run the actual build
        echo "Running buildozer android debug..."
        buildozer android debug --verbose 2>&1 | tee build.log || {
          echo "Buildozer build failed! See build.log for details."
          tail -500 build.log # Show more lines for debugging
          exit 1
        }

        echo "Buildozer build completed. Searching for APK..."

        # Find the generated APK and copy it to the bin directory
        # This is more robust as buildozer might place it in slightly different locations
        APK_FILE=$(find . -name "*.apk" -type f | head -1) # Find the first .apk file
        if [ -z "$APK_FILE" ]; then
          # Fallback to buildozer's default dist directory if not found in current dir
          APK_FILE=$(find .buildozer/android/platform/build-*/dists/testapp/ -name "*.apk" -type f | head -1)
        fi

        if [ -n "$APK_FILE" ]; then
          echo "✅ Found APK: $APK_FILE"
          mkdir -p bin/ # Ensure bin directory exists
          cp "$APK_FILE" bin/testapp-debug.apk # Standardize the output name
          echo "✅ Copied APK to Android/bin/testapp-debug.apk for upload"
          ls -la bin/
        else
          echo "❌ ERROR: No APK file found after build process. Check build.log for errors."
          exit 1 # Fail the workflow if no APK is found
        fi

    - name: Upload APK
      uses: actions/upload-artifact@v4
      if: success() # Only upload if the previous steps succeeded
      with:
        name: android-apk-testapp
        path: Android/bin/testapp-debug.apk # Point to the standardized location
        if-no-files-found: fail # Fail the workflow if the APK is still not found here
