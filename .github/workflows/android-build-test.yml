name: Build Android APK - Test (Latest Features)

on:
  push:
    branches:
      - master
    paths:
      - 'Android/**'
      - '.github/workflows/android-build-test.yml'
  pull_request:
    branches:
      - master
    paths:
      - 'Android/**'
      - '.github/workflows/android-build-test.yml'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Verify Android app structure
      working-directory: Android
      run: |
        echo "üîç Verifying Android app structure..."
        echo "Main app file:"
        ls -la main.py
        echo "App size:"
        wc -l main.py
        echo "Key features check (scanning for recent additions):"
        echo "- Countdown timers:" && grep -c "countdown" main.py || echo "  ‚ùå Not found"
        echo "- Mark Absent feature:" && grep -c "mark_absent\|Mark Absent" main.py || echo "  ‚ùå Not found"
        echo "- Google Sheets integration:" && grep -c "sheets_service\|google" main.py || echo "  ‚ùå Not found"
        echo "- Green scanning buttons:" && grep -c "0.15, 0.7, 0.3" main.py || echo "  ‚ùå Not found"
        echo ""
        echo "üìÅ Checking config files:"
        if [ -d "config" ]; then
          echo "Config directory found:"
          ls -la config/
        else
          echo "‚ö†Ô∏è  Warning: config directory not found!"
        fi
        echo "‚úÖ App verification complete"
    
    - name: Prepare buildozer.spec for production build
      working-directory: Android
      run: |
        echo "üìù Preparing buildozer.spec for production build with latest features..."
        
        # Use more recent, stable versions for our enhanced app
        sed -i 's/^android\.api = .*/android.api = 31/' buildozer.spec
        sed -i 's/^android\.ndk = .*/android.ndk = 25b/' buildozer.spec  
        sed -i 's/^android\.minapi = .*/android.minapi = 21/' buildozer.spec
        sed -i 's/^android\.sdk = .*/android.sdk = 31/' buildozer.spec
        sed -i 's/^android\.build_tools = .*/android.build_tools = 31.0.0/' buildozer.spec
        sed -i 's/^android\.archs = .*/android.archs = arm64-v8a,armeabi-v7a/' buildozer.spec # Multi-arch for better compatibility
        
        # CRITICAL: Include all required Python dependencies
        # Base: kivy, kivymd, plyer
        # Google Auth: google-api-python-client, google-auth, google-auth-oauthlib, google-auth-httplib2
        # Google Auth Dependencies: cachetools, pyasn1, pyasn1-modules, rsa
        # HTTP/Network: requests, urllib3, certifi, charset-normalizer, idna, httplib2
        # Utilities: filetype, six, pyparsing
        sed -i 's/^requirements = .*/requirements = python3,kivy==2.3.1,kivymd,plyer,google-api-python-client,google-auth,google-auth-oauthlib,google-auth-httplib2,filetype,cachetools,requests,urllib3,certifi,charset-normalizer,idna,httplib2,pyparsing,pyasn1,pyasn1-modules,rsa,six,requests-oauthlib,oauthlib/' buildozer.spec
        
        # CRITICAL: Include JSON and other data files in the APK
        sed -i 's/^source\.include_exts = .*/source.include_exts = py,png,jpg,kv,atlas,json,txt/' buildozer.spec
        
        # Enable AndroidX and other modern Android features
        if ! grep -q "android.enable_androidx" buildozer.spec; then
          echo "android.enable_androidx = True" >> buildozer.spec
        else
          sed -i 's/^android\.enable_androidx = .*/android.enable_androidx = True/' buildozer.spec
        fi
        
        # Add NFC permissions for our NFC functionality
        if ! grep -q "android.permissions" buildozer.spec; then
          echo "android.permissions = INTERNET,ACCESS_NETWORK_STATE,NFC,WRITE_EXTERNAL_STORAGE,READ_EXTERNAL_STORAGE,CALL_PHONE" >> buildozer.spec
        else
          sed -i 's/^android\.permissions = .*/android.permissions = INTERNET,ACCESS_NETWORK_STATE,NFC,WRITE_EXTERNAL_STORAGE,READ_EXTERNAL_STORAGE,CALL_PHONE/' buildozer.spec
        fi
        
        # Set app metadata for our enhanced version
        sed -i 's/^title = .*/title = TP NFC - Enhanced/' buildozer.spec
        sed -i 's/^package\.name = .*/package.name = tpnfcenhanced/' buildozer.spec
        sed -i 's/^package\.domain = .*/package.domain = com.tpnfc/' buildozer.spec
        sed -i 's/^version = .*/version = 2.0/' buildozer.spec
        
        echo "üìã Final buildozer.spec configuration:"
        grep -E "title|package\.|version|android\.(api|sdk|ndk|minapi|archs|build_tools|enable_androidx|permissions)|requirements|source\.include" buildozer.spec
    
    - name: Build Enhanced APK using Docker
      working-directory: Android
      timeout-minutes: 60
      run: |
        echo "üöÄ Building enhanced APK with all latest features..."
        
        # Create enhanced Dockerfile with better performance and newer tools
        cat > Dockerfile << 'EOF'
        FROM ubuntu:22.04
        
        # Prevent interactive prompts
        ENV DEBIAN_FRONTEND=noninteractive
        
        # Install system dependencies with enhanced tooling
        RUN apt-get update && apt-get install -y \
            python3 \
            python3-pip \
            python3-dev \
            openjdk-17-jdk \
            git \
            unzip \
            wget \
            curl \
            build-essential \
            zip \
            sudo \
            autoconf \
            automake \
            libtool \
            pkg-config \
            zlib1g-dev \
            libncurses5-dev \
            libncursesw5-dev \
            libtinfo5 \
            cmake \
            libffi-dev \
            libssl-dev \
            ninja-build \
            ccache \
            && rm -rf /var/lib/apt/lists/*
        
        # Create non-root user
        RUN useradd -m -u 1000 builduser && \
            echo "builduser:builduser" | chpasswd && \
            adduser builduser sudo && \
            echo "builduser ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
        
        # Set Java environment
        ENV JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
        ENV PATH=$JAVA_HOME/bin:$PATH
        
        # Switch to builduser
        USER builduser
        WORKDIR /home/builduser
        
        # Install enhanced Python tools and buildozer
        RUN pip3 install --user --upgrade pip setuptools wheel && \
            pip3 install --user buildozer==1.5.0 cython==0.29.33 kivy==2.3.1
        ENV PATH=/home/builduser/.local/bin:$PATH
        
        # Setup Android SDK for enhanced build
        ENV ANDROID_HOME=/home/builduser/.buildozer/android/platform/android-sdk
        ENV ANDROID_SDK_ROOT=$ANDROID_HOME
        ENV PATH=$ANDROID_HOME/cmdline-tools/latest/bin:$ANDROID_HOME/platform-tools:$ANDROID_HOME/build-tools/31.0.0:$PATH
        
        # Create Android SDK structure
        RUN mkdir -p $ANDROID_HOME/cmdline-tools
        
        # Download latest Android command-line tools
        RUN cd /tmp && \
            wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip && \
            unzip -q commandlinetools-linux-9477386_latest.zip && \
            mv cmdline-tools $ANDROID_HOME/cmdline-tools/latest && \
            rm commandlinetools-linux-9477386_latest.zip
        
        # Install enhanced SDK components
        RUN yes | sdkmanager --licenses && \
            sdkmanager \
                "platforms;android-31" \
                "platforms;android-21" \
                "build-tools;31.0.0" \
                "platform-tools" \
                "cmake;3.22.1" \
                "ndk;25.2.9519653"
        
        # Create buildozer compatibility structure
        RUN mkdir -p $ANDROID_HOME/tools/bin && \
            ln -sf $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager $ANDROID_HOME/tools/bin/sdkmanager && \
            ln -sf $ANDROID_HOME/cmdline-tools/latest/bin/avdmanager $ANDROID_HOME/tools/bin/avdmanager
        
        # Verify enhanced setup
        RUN which aidl || find $ANDROID_HOME -name "aidl" -type f | head -1 && \
            ls -la $ANDROID_HOME/tools/bin/ && \
            $ANDROID_HOME/tools/bin/sdkmanager --version
        
        WORKDIR /workspace
        CMD ["buildozer", "android", "debug", "--verbose"]
        EOF
        
        echo "üî® Building enhanced buildozer Docker image..."
        docker build -t enhanced-buildozer .
        
        echo "üèóÔ∏è Building enhanced APK with Docker..."
        
        # Set proper permissions
        sudo chown -R 1000:1000 .
        
        # Run enhanced build
        docker run --rm \
          -v "$PWD":/workspace \
          -w /workspace \
          -u builduser \
          -e ANDROID_HOME=/home/builduser/.buildozer/android/platform/android-sdk \
          -e ANDROID_SDK_ROOT=/home/builduser/.buildozer/android/platform/android-sdk \
          -e PATH="/home/builduser/.buildozer/android/platform/android-sdk/cmdline-tools/latest/bin:/home/builduser/.buildozer/android/platform/android-sdk/platform-tools:/home/builduser/.buildozer/android/platform/android-sdk/build-tools/31.0.0:/home/builduser/.local/bin:/usr/lib/jvm/java-17-openjdk-amd64/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin" \
          enhanced-buildozer \
          bash -c "
            echo 'üîç Verifying enhanced Android SDK setup...'
            ls -la \$ANDROID_HOME/build-tools/ || echo 'No build-tools directory'
            find \$ANDROID_HOME -name 'aidl' -type f | head -3 || echo 'aidl not found'
            
            echo 'üöÄ Running enhanced buildozer build...'
            buildozer android debug --verbose
            
            echo '‚úÖ Enhanced build completed. Checking results...'
            ls -la bin/ || echo 'No bin directory found'
            find . -name '*.apk' -type f
          "
          
        # Check build result
        DOCKER_EXIT_CODE=$?
        if [ $DOCKER_EXIT_CODE -ne 0 ]; then
          echo "‚ùå Enhanced Docker build failed with exit code $DOCKER_EXIT_CODE"
          exit 1
        fi
        
        echo "‚úÖ Enhanced buildozer build completed successfully!"
        
        # Find the enhanced APK
        echo "üîç Locating enhanced APK..."
        ls -la
        ls -la bin/ 2>/dev/null || echo "No bin directory found"
        find . -name "*.apk" -type f 2>/dev/null || echo "No APK files found"
        
        APK_FILE=$(find bin -name "*.apk" -type f 2>/dev/null | head -1)
        
        if [ -z "$APK_FILE" ]; then
          APK_FILE=$(find . -name "*.apk" -type f 2>/dev/null | head -1)
        fi
        
        if [ -n "$APK_FILE" ]; then
          echo "‚úÖ Enhanced APK found: $APK_FILE"
          echo "üì± APK size: $(du -h $APK_FILE)"
          echo "üìã APK details:"
          ls -la "$APK_FILE"
        else
          echo "‚ùå Enhanced APK not found after build."
          exit 1
        fi
    
    - name: Upload Enhanced APK
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: android-apk-enhanced-features
        path: Android/bin/*.apk
        if-no-files-found: error
    
    - name: Build Summary
      if: success()
      run: |
        echo "üéâ Enhanced Android APK Build Summary:"
        echo "‚úÖ App with latest features built successfully"
        echo "‚úÖ Includes animated countdown timers"
        echo "‚úÖ Includes Mark Absent functionality"  
        echo "‚úÖ Includes Google Sheets integration"
        echo "‚úÖ Includes positive green scanning UX"
        echo "‚úÖ Production-ready with all enhancements"
        echo "üì± APK available as artifact: android-apk-enhanced-features"