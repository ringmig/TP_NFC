name: Python CI/CD Pipeline

on:
  push:
    branches: [ main, master, dev ]
  pull_request:
    branches: [ main, master ]

jobs:
  # Code Quality and Linting
  lint:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-lint-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-lint-
          ${{ runner.os }}-pip-
    
    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy bandit[toml] pylint
    
    - name: Run black (code formatter)
      run: |
        black --check --diff src/ tools/ tests/
      continue-on-error: true
    
    - name: Run isort (import sorter)
      run: |
        isort --check-only --diff src/ tools/ tests/
      continue-on-error: true
    
    - name: Run flake8 (style guide enforcement)
      run: |
        # Stop on Python syntax errors or undefined names
        flake8 src/ tools/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Full linting report (warnings don't fail the build)
        flake8 src/ tools/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics \
          --format='::warning file=%(path)s,line=%(row)d,col=%(col)d::%(code)s %(text)s'
    
    - name: Run pylint
      run: |
        pylint src/ tools/ tests/ --exit-zero --output-format=colorized
      continue-on-error: true
    
    - name: Run mypy (type checking)
      run: |
        mypy src/ --ignore-missing-imports --no-error-summary
      continue-on-error: true

  # Security Scanning
  security:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-security-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-security-
          ${{ runner.os }}-pip-
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit[toml] safety pip-audit
    
    - name: Run bandit (security linter)
      run: |
        bandit -r src/ tools/ -f json -o bandit-report.json || true
        if [ -f bandit-report.json ]; then
          echo "::warning::Security issues found. Check bandit report."
          cat bandit-report.json
        fi
    
    - name: Check for known vulnerabilities
      run: |
        pip install -r requirements.txt
        pip-audit || true
        safety check --json || true

  # Testing across Python versions
  test:
    needs: [lint]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
        python-version: ['3.13']

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/pip
          ~/Library/Caches/pip
          ~\AppData\Local\pip\Cache
        key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-${{ matrix.python-version }}-
          ${{ runner.os }}-pip-
    
    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew update
        brew install pcsc-lite
    
    - name: Install system dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        # Windows should have PCSC built-in, but ensure it's available
        echo "Windows PCSC should be available by default"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-xdist pytest-timeout
    
    - name: Run tests with coverage
      run: |
        pytest --cov=src --cov-report=xml --cov-report=term-missing \
               --verbose --timeout=60 -n auto tests/
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-${{ matrix.os }}-py${{ matrix.python-version }}
      continue-on-error: true

  # Build test (preparation for future executable builds)
  build-test:
    needs: [test]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
        python-version: ['3.13']

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller cx_Freeze py2app setuptools wheel
    
    - name: Test PyInstaller spec creation
      run: |
        pyinstaller --onefile --windowed \
          --name TP_NFC \
          --icon assets/logo.png \
          --add-data "assets:assets" \
          --add-data "config:config" \
          --hidden-import customtkinter \
          --hidden-import pyscard \
          --hidden-import nfcpy \
          --collect-all customtkinter \
          --noconfirm \
          --clean \
          src/main.py
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-test-${{ matrix.os }}
        path: dist/
        retention-days: 7

  # Summary job
  ci-success:
    needs: [lint, security, test, build-test]
    runs-on: windows-latest
    if: always()
    steps:
    - name: Check CI Status
      run: |
        if [ "${{ needs.lint.result }}" == "failure" ] || \
           [ "${{ needs.test.result }}" == "failure" ]; then
          echo "::error::CI failed! Check the logs above."
          exit 1
        else
          echo "::notice::All CI checks passed!"
        fi
